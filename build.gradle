String gitVersion
if (hasProperty("release")) {
	gitVersion = ["git", "describe", "--match", "[0-9]*", "--dirty"].execute().text.trim()
} else {
	gitVersion = ["git", "describe", "--match", "[0-9]*", "--abbrev=0"].execute().text.trim() + "-SNAPSHOT"
}

task version {
	doLast {
		println "Version: ${gitVersion}"
	}
}

def sonatype = hasProperty("sonatype")
def signArtifacts = sonatype || hasProperty("sign")

allprojects {
	group = "com.prezi.grub"
	version = gitVersion
	description = "Grub creates projects from templates"
}

subprojects { subproject ->
	apply plugin: "idea"
	apply plugin: "maven"
	apply plugin: "groovy"

	sourceCompatibility = 1.6
	targetCompatibility = 1.6

	repositories {
		mavenCentral()
		maven {
			url "http://gradle.artifactoryonline.com/gradle/libs"
		}
	}

	dependencies {
		compile "commons-io:commons-io:2.4"
		compile "com.google.guava:guava:17.0"
		compile "org.slf4j:slf4j-api:1.7.7"

		testCompile "junit:junit:4.11"
		testCompile("org.spockframework:spock-core:0.7-groovy-2.0") {
			exclude group: "org.codehaus.groovy"
		}
	}

	uploadArchives {
		repositories {
			mavenDeployer {
				pom.project {
					url "http://github.com/prezi/grub"
					name subproject.name
					description subproject.description

					scm {
						url "http://github.com/prezi/grub"
						connection "scm:git@github.com:prezi/grub.git"
						developerConnection "scm:git@github.com:prezi/grub.git"
					}

					licenses {
						license {
							name "The Apache Software License, Version 2.0"
							url "http://www.apache.org/licenses/LICENSE-2.0.txt"
							distribution "repo"
						}
					}

					developers {
						developer {
							id "lptr"
							name "Lorant Pinter"
						}
					}
				}

				if (sonatype) {
					repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
						def user = project.getProperty("sonatypeUsername")
						def password = project.getProperty("sonatypePassword")
						authentication(userName: user, password: password)
					}
					snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
						def user = project.getProperty("sonatypeUsername")
						def password = project.getProperty("sonatypePassword")
						authentication(userName: user, password: password)
					}
				} else if (project.hasProperty("nexusUser") && project.hasProperty("nexusPassword")) {
					def user = project.getProperty("nexusUser")
					def password = project.getProperty("nexusPassword")
					repository(url: "https://artifactory.prezi.com/plugins-release-local/") {
						authentication(userName: user, password: password)
					}
					snapshotRepository(url: "https://artifactory.prezi.com/plugins-snapshot-local/") {
						authentication(userName: user, password: password)
					}
				}
			}
		}
	}

	if (signArtifacts) {
		apply plugin: "signing"

		signing {
			sign configurations.archives
		}

		uploadArchives {
			repositories {
				mavenDeployer {
					beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
				}
			}
		}
	}

	task javadocJar(type: Jar) {
		dependsOn javadoc
		classifier = "javadoc"
		from "build/docs/javadoc"
	}

	task sourcesJar(type: Jar) {
		from sourceSets.main.allSource
		classifier = "sources"
	}

	jar {
		from rootProject.file("LICENSE.txt")
	}

	artifacts {
		archives jar
		archives javadocJar
		archives sourcesJar
	}
}

project("grub") {
	apply plugin: "application"
	mainClassName = "com.prezi.grub.GrubCli"

	dependencies {
		compile "org.gradle:gradle-tooling-api:2.0"
		compile "io.airlift:airline:0.6"
		compile "ch.qos.logback:logback-classic:1.1.2"
		compile "org.codehaus.groovy:groovy:2.3.3"
	}

	processResources {
		inputs.property "version", version
		filter org.apache.tools.ant.filters.ReplaceTokens, tokens: [
				version: version
		]
	}

	configure(applicationDistribution) {
		from(rootProject.file("README.md")) {
			into "/"
		}
		from(rootProject.file("LICENSE.txt")) {
			into "/"
		}
	}

	artifacts {
		archives(distZip) {
			classifier "dist"
		}
	}
}

project("gradle-grub-plugin") {
	dependencies {
		compile gradleApi()
	}
}

allprojects {
	tasks.withType(Upload).all { task -> task.dependsOn "check" }
	tasks.withType(JavaCompile) {
		options.compilerArgs << "-Xlint:unchecked"
	}
}

task wrapper(type: Wrapper) {
	gradleVersion = "2.0"
}
